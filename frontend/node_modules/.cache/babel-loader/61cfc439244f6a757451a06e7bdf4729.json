{"ast":null,"code":"import * as colors from './colors';\nimport * as elevation from './elevation';\nimport * as typography from './typography';\nimport * as math from './utils/math';\nimport getTheme from './utils/getTheme';\nimport themed from './utils/themed';\nimport AtlaskitThemeProvider from './components/AtlaskitThemeProvider';\nexport { colors, elevation, typography, math, getTheme, themed, AtlaskitThemeProvider };\nexport { default as Appearance } from './components/Appearance'; // backwards-compatible export with old Atlaskit case\n\nexport var AtlasKitThemeProvider = AtlaskitThemeProvider;\n/*\n  These theme values are expressed as functions so that if we decide to make\n  them dependent on props in the future, it wouldn't require a significant\n  refactor everywhere they are being used.\n*/\n\nexport var borderRadius = function borderRadius() {\n  return 3;\n};\nexport var gridSize = function gridSize() {\n  return 8;\n};\nexport var fontSize = function fontSize() {\n  return 14;\n};\nexport var fontFamily = function fontFamily() {\n  return '-apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\", \"Oxygen\", \"Ubuntu\", \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif';\n};\nexport var codeFontFamily = function codeFontFamily() {\n  return '\"SFMono-Medium\", \"SF Mono\", \"Segoe UI Mono\", \"Roboto Mono\", \"Ubuntu Mono\", Menlo, Consolas, Courier, monospace';\n};\nexport var layers = {\n  card: function card() {\n    return 100;\n  },\n  dialog: function dialog() {\n    return 200;\n  },\n  navigation: function navigation() {\n    return 300;\n  },\n  layer: function layer() {\n    return 400;\n  },\n  blanket: function blanket() {\n    return 500;\n  },\n  modal: function modal() {\n    return 510;\n  },\n  flag: function flag() {\n    return 600;\n  },\n  spotlight: function spotlight() {\n    return 700;\n  },\n  tooltip: function tooltip() {\n    return 800;\n  }\n}; // New API\n\nexport { Consumer, Provider } from './components/Context';\nexport { default as Reset } from './components/Reset';\nexport { default as Theme } from './components/Theme';","map":{"version":3,"sources":["/Users/niharikatomar/Desktop/rr/restaurant-roulette/frontend/node_modules/@atlaskit/theme/dist/esm/index.js"],"names":["colors","elevation","typography","math","getTheme","themed","AtlaskitThemeProvider","default","Appearance","AtlasKitThemeProvider","borderRadius","gridSize","fontSize","fontFamily","codeFontFamily","layers","card","dialog","navigation","layer","blanket","modal","flag","spotlight","tooltip","Consumer","Provider","Reset","Theme"],"mappings":"AAAA,OAAO,KAAKA,MAAZ,MAAwB,UAAxB;AACA,OAAO,KAAKC,SAAZ,MAA2B,aAA3B;AACA,OAAO,KAAKC,UAAZ,MAA4B,cAA5B;AACA,OAAO,KAAKC,IAAZ,MAAsB,cAAtB;AACA,OAAOC,QAAP,MAAqB,kBAArB;AACA,OAAOC,MAAP,MAAmB,gBAAnB;AACA,OAAOC,qBAAP,MAAkC,oCAAlC;AAEA,SAASN,MAAT,EAAiBC,SAAjB,EAA4BC,UAA5B,EAAwCC,IAAxC,EAA8CC,QAA9C,EAAwDC,MAAxD,EAAgEC,qBAAhE;AACA,SAASC,OAAO,IAAIC,UAApB,QAAsC,yBAAtC,C,CAEA;;AACA,OAAO,IAAIC,qBAAqB,GAAGH,qBAA5B;AAEP;;;;;;AAKA,OAAO,IAAII,YAAY,GAAG,SAASA,YAAT,GAAwB;AAChD,SAAO,CAAP;AACD,CAFM;AAGP,OAAO,IAAIC,QAAQ,GAAG,SAASA,QAAT,GAAoB;AACxC,SAAO,CAAP;AACD,CAFM;AAGP,OAAO,IAAIC,QAAQ,GAAG,SAASA,QAAT,GAAoB;AACxC,SAAO,EAAP;AACD,CAFM;AAGP,OAAO,IAAIC,UAAU,GAAG,SAASA,UAAT,GAAsB;AAC5C,SAAO,sIAAP;AACD,CAFM;AAGP,OAAO,IAAIC,cAAc,GAAG,SAASA,cAAT,GAA0B;AACpD,SAAO,gHAAP;AACD,CAFM;AAIP,OAAO,IAAIC,MAAM,GAAG;AAClBC,EAAAA,IAAI,EAAE,SAASA,IAAT,GAAgB;AACpB,WAAO,GAAP;AACD,GAHiB;AAIlBC,EAAAA,MAAM,EAAE,SAASA,MAAT,GAAkB;AACxB,WAAO,GAAP;AACD,GANiB;AAOlBC,EAAAA,UAAU,EAAE,SAASA,UAAT,GAAsB;AAChC,WAAO,GAAP;AACD,GATiB;AAUlBC,EAAAA,KAAK,EAAE,SAASA,KAAT,GAAiB;AACtB,WAAO,GAAP;AACD,GAZiB;AAalBC,EAAAA,OAAO,EAAE,SAASA,OAAT,GAAmB;AAC1B,WAAO,GAAP;AACD,GAfiB;AAgBlBC,EAAAA,KAAK,EAAE,SAASA,KAAT,GAAiB;AACtB,WAAO,GAAP;AACD,GAlBiB;AAmBlBC,EAAAA,IAAI,EAAE,SAASA,IAAT,GAAgB;AACpB,WAAO,GAAP;AACD,GArBiB;AAsBlBC,EAAAA,SAAS,EAAE,SAASA,SAAT,GAAqB;AAC9B,WAAO,GAAP;AACD,GAxBiB;AAyBlBC,EAAAA,OAAO,EAAE,SAASA,OAAT,GAAmB;AAC1B,WAAO,GAAP;AACD;AA3BiB,CAAb,C,CA8BP;;AACA,SAASC,QAAT,EAAmBC,QAAnB,QAAmC,sBAAnC;AACA,SAASnB,OAAO,IAAIoB,KAApB,QAAiC,oBAAjC;AACA,SAASpB,OAAO,IAAIqB,KAApB,QAAiC,oBAAjC","sourcesContent":["import * as colors from './colors';\nimport * as elevation from './elevation';\nimport * as typography from './typography';\nimport * as math from './utils/math';\nimport getTheme from './utils/getTheme';\nimport themed from './utils/themed';\nimport AtlaskitThemeProvider from './components/AtlaskitThemeProvider';\n\nexport { colors, elevation, typography, math, getTheme, themed, AtlaskitThemeProvider };\nexport { default as Appearance } from './components/Appearance';\n\n// backwards-compatible export with old Atlaskit case\nexport var AtlasKitThemeProvider = AtlaskitThemeProvider;\n\n/*\n  These theme values are expressed as functions so that if we decide to make\n  them dependent on props in the future, it wouldn't require a significant\n  refactor everywhere they are being used.\n*/\nexport var borderRadius = function borderRadius() {\n  return 3;\n};\nexport var gridSize = function gridSize() {\n  return 8;\n};\nexport var fontSize = function fontSize() {\n  return 14;\n};\nexport var fontFamily = function fontFamily() {\n  return '-apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\", \"Oxygen\", \"Ubuntu\", \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif';\n};\nexport var codeFontFamily = function codeFontFamily() {\n  return '\"SFMono-Medium\", \"SF Mono\", \"Segoe UI Mono\", \"Roboto Mono\", \"Ubuntu Mono\", Menlo, Consolas, Courier, monospace';\n};\n\nexport var layers = {\n  card: function card() {\n    return 100;\n  },\n  dialog: function dialog() {\n    return 200;\n  },\n  navigation: function navigation() {\n    return 300;\n  },\n  layer: function layer() {\n    return 400;\n  },\n  blanket: function blanket() {\n    return 500;\n  },\n  modal: function modal() {\n    return 510;\n  },\n  flag: function flag() {\n    return 600;\n  },\n  spotlight: function spotlight() {\n    return 700;\n  },\n  tooltip: function tooltip() {\n    return 800;\n  }\n};\n\n// New API\nexport { Consumer, Provider } from './components/Context';\nexport { default as Reset } from './components/Reset';\nexport { default as Theme } from './components/Theme';"]},"metadata":{},"sourceType":"module"}