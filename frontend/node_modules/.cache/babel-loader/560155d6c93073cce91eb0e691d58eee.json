{"ast":null,"code":"import styled, { css } from 'styled-components';\nimport { codeFontFamily, colors, fontSize, themed } from '@atlaskit/theme';\n\nvar getPlaceholderColor = function getPlaceholderColor(_ref) {\n  var disabled = _ref.disabled;\n\n  if (disabled) {\n    return themed({\n      light: colors.N70,\n      dark: colors.DN90\n    });\n  }\n\n  return themed({\n    light: colors.N100,\n    dark: colors.DN90\n  });\n}; // can't group these placeholder styles into one block because browsers drop\n// entire style blocks when any single selector fails to parse\n\n\nvar getPlaceholderStyle = function getPlaceholderStyle() {\n  return css([\"\\n  &::-webkit-input-placeholder {\\n    /* WebKit, Blink, Edge */\\n    color: \", \";\\n  }\\n  &::-moz-placeholder {\\n    /* Mozilla Firefox 19+ */\\n    color: \", \";\\n    opacity: 1;\\n  }\\n  &::-ms-input-placeholder {\\n    /* Microsoft Edge */\\n    color: \", \";\\n  }\\n  &:-ms-input-placeholder {\\n    /* Internet Explorer 10-11 */\\n    color: \", \";\\n  }\\n\"], getPlaceholderColor, getPlaceholderColor, getPlaceholderColor, getPlaceholderColor);\n}; // Safari puts on some difficult to remove styles, mainly for disabled inputs\n// but we want full control so need to override them in all cases\n\n\nvar overrideSafariDisabledStyles = \"\\n  -webkit-text-fill-color: unset;\\n  -webkit-opacity: 1;\\n\";\nvar InputElement = styled.input.withConfig({\n  displayName: \"Input__InputElement\",\n  componentId: \"sc-1o6bj35-0\"\n})([\"\\n  background: transparent;\\n  border: 0;\\n  box-sizing: border-box;\\n  color: inherit;\\n  cursor: inherit;\\n  font-family: \", \";\\n  font-size: \", \"px;\\n  min-width: 0;\\n  outline: none;\\n  width: 100%;\\n\\n  [disabled] {\\n    \", \";\\n  }\\n\\n  &::-ms-clear {\\n    display: none;\\n  }\\n\\n  &:invalid {\\n    box-shadow: none;\\n  }\\n  \", \";\\n\"], function (p) {\n  return p.isMonospaced ? codeFontFamily() : 'inherit';\n}, fontSize, overrideSafariDisabledStyles, getPlaceholderStyle);\nexport default InputElement;","map":{"version":3,"sources":["/Users/niharikatomar/Desktop/rr/restaurant-roulette/frontend/node_modules/@atlaskit/field-text/dist/esm/styled/Input.js"],"names":["styled","css","codeFontFamily","colors","fontSize","themed","getPlaceholderColor","_ref","disabled","light","N70","dark","DN90","N100","getPlaceholderStyle","overrideSafariDisabledStyles","InputElement","input","withConfig","displayName","componentId","p","isMonospaced"],"mappings":"AAAA,OAAOA,MAAP,IAAiBC,GAAjB,QAA4B,mBAA5B;AACA,SAASC,cAAT,EAAyBC,MAAzB,EAAiCC,QAAjC,EAA2CC,MAA3C,QAAyD,iBAAzD;;AAEA,IAAIC,mBAAmB,GAAG,SAASA,mBAAT,CAA6BC,IAA7B,EAAmC;AAC3D,MAAIC,QAAQ,GAAGD,IAAI,CAACC,QAApB;;AAEA,MAAIA,QAAJ,EAAc;AACZ,WAAOH,MAAM,CAAC;AACZI,MAAAA,KAAK,EAAEN,MAAM,CAACO,GADF;AAEZC,MAAAA,IAAI,EAAER,MAAM,CAACS;AAFD,KAAD,CAAb;AAID;;AAED,SAAOP,MAAM,CAAC;AACZI,IAAAA,KAAK,EAAEN,MAAM,CAACU,IADF;AAEZF,IAAAA,IAAI,EAAER,MAAM,CAACS;AAFD,GAAD,CAAb;AAID,CAdD,C,CAcG;AACH;;;AAGA,IAAIE,mBAAmB,GAAG,SAASA,mBAAT,GAA+B;AACvD,SAAOb,GAAG,CAAC,CAAC,gFAAD,EAAmF,6EAAnF,EAAkK,8FAAlK,EAAkQ,qFAAlQ,EAAyV,UAAzV,CAAD,EAAuWK,mBAAvW,EAA4XA,mBAA5X,EAAiZA,mBAAjZ,EAAsaA,mBAAta,CAAV;AACD,CAFD,C,CAEG;AACH;;;AAGA,IAAIS,4BAA4B,GAAG,8DAAnC;AACA,IAAIC,YAAY,GAAGhB,MAAM,CAACiB,KAAP,CAAaC,UAAb,CAAwB;AACzCC,EAAAA,WAAW,EAAE,qBAD4B;AAEzCC,EAAAA,WAAW,EAAE;AAF4B,CAAxB,EAGhB,CAAC,+HAAD,EAAkI,kBAAlI,EAAsJ,gFAAtJ,EAAwO,sGAAxO,EAAgV,KAAhV,CAHgB,EAGwU,UAAUC,CAAV,EAAa;AACtW,SAAOA,CAAC,CAACC,YAAF,GAAiBpB,cAAc,EAA/B,GAAoC,SAA3C;AACD,CALkB,EAKhBE,QALgB,EAKNW,4BALM,EAKwBD,mBALxB,CAAnB;AAMA,eAAeE,YAAf","sourcesContent":["import styled, { css } from 'styled-components';\nimport { codeFontFamily, colors, fontSize, themed } from '@atlaskit/theme';\n\nvar getPlaceholderColor = function getPlaceholderColor(_ref) {\n  var disabled = _ref.disabled;\n\n  if (disabled) {\n    return themed({\n      light: colors.N70,\n      dark: colors.DN90\n    });\n  }\n\n  return themed({\n    light: colors.N100,\n    dark: colors.DN90\n  });\n}; // can't group these placeholder styles into one block because browsers drop\n// entire style blocks when any single selector fails to parse\n\n\nvar getPlaceholderStyle = function getPlaceholderStyle() {\n  return css([\"\\n  &::-webkit-input-placeholder {\\n    /* WebKit, Blink, Edge */\\n    color: \", \";\\n  }\\n  &::-moz-placeholder {\\n    /* Mozilla Firefox 19+ */\\n    color: \", \";\\n    opacity: 1;\\n  }\\n  &::-ms-input-placeholder {\\n    /* Microsoft Edge */\\n    color: \", \";\\n  }\\n  &:-ms-input-placeholder {\\n    /* Internet Explorer 10-11 */\\n    color: \", \";\\n  }\\n\"], getPlaceholderColor, getPlaceholderColor, getPlaceholderColor, getPlaceholderColor);\n}; // Safari puts on some difficult to remove styles, mainly for disabled inputs\n// but we want full control so need to override them in all cases\n\n\nvar overrideSafariDisabledStyles = \"\\n  -webkit-text-fill-color: unset;\\n  -webkit-opacity: 1;\\n\";\nvar InputElement = styled.input.withConfig({\n  displayName: \"Input__InputElement\",\n  componentId: \"sc-1o6bj35-0\"\n})([\"\\n  background: transparent;\\n  border: 0;\\n  box-sizing: border-box;\\n  color: inherit;\\n  cursor: inherit;\\n  font-family: \", \";\\n  font-size: \", \"px;\\n  min-width: 0;\\n  outline: none;\\n  width: 100%;\\n\\n  [disabled] {\\n    \", \";\\n  }\\n\\n  &::-ms-clear {\\n    display: none;\\n  }\\n\\n  &:invalid {\\n    box-shadow: none;\\n  }\\n  \", \";\\n\"], function (p) {\n  return p.isMonospaced ? codeFontFamily() : 'inherit';\n}, fontSize, overrideSafariDisabledStyles, getPlaceholderStyle);\nexport default InputElement;"]},"metadata":{},"sourceType":"module"}