{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread\";\nimport { css as _css2 } from \"emotion\";\nimport { css as _css } from \"emotion\";\nimport React from 'react';\nimport { groupedCountries } from './data/countries';\nimport Select from './Select'; // flow stuff\n// custom option renderer\n\nvar labelCSS = function labelCSS() {\n  return {\n    alignItems: 'center',\n    display: 'flex',\n    lineHeight: 1.2\n  };\n};\n\nvar flagCSS = function flagCSS() {\n  return {\n    fontSize: '18px',\n    marginRight: '8px'\n  };\n};\n\nvar Opt = function Opt(_ref) {\n  var children = _ref.children,\n      icon = _ref.icon;\n  return React.createElement(\"div\", {\n    className: _css(labelCSS())\n  }, React.createElement(\"span\", {\n    className: _css2(flagCSS())\n  }, icon), children);\n}; // return the country name; used for searching\n\n\nvar getOptionLabel = function getOptionLabel(opt) {\n  return opt.name;\n}; // set the country's abbreviation for the option value, (also searchable)\n\n\nvar getOptionValue = function getOptionValue(opt) {\n  return opt.abbr;\n}; // the text node of the control\n\n\nvar controlLabel = function controlLabel(opt) {\n  return React.createElement(Opt, {\n    icon: opt.icon\n  }, opt.abbr.toUpperCase());\n}; // the text node for an option\n\n\nvar optionLabel = function optionLabel(_ref2) {\n  var abbr = _ref2.abbr,\n      code = _ref2.code,\n      icon = _ref2.icon,\n      name = _ref2.name;\n  return React.createElement(Opt, {\n    icon: icon\n  }, name, \" (\", abbr.toUpperCase(), \") +\", code);\n}; // switch formatters based on render context (menu | value)\n\n\nvar formatOptionLabel = function formatOptionLabel(opt, _ref3) {\n  var context = _ref3.context;\n  return context === 'value' ? controlLabel(opt) : optionLabel(opt);\n}; // put it all together\n\n\nvar CountrySelect = function CountrySelect(props) {\n  return React.createElement(Select, _extends({\n    isClearable: false,\n    formatOptionLabel: formatOptionLabel,\n    getOptionLabel: getOptionLabel,\n    getOptionValue: getOptionValue,\n    isMulti: false,\n    options: groupedCountries,\n    styles: {\n      container: function container(css) {\n        return _objectSpread({}, css, {\n          width: 105\n        });\n      },\n      dropdownIndicator: function dropdownIndicator(css) {\n        return _objectSpread({}, css, {\n          paddingLeft: 0\n        });\n      },\n      menu: function menu(css) {\n        return _objectSpread({}, css, {\n          width: 300\n        });\n      }\n    }\n  }, props));\n};\n\nexport default CountrySelect;","map":{"version":3,"sources":["/Users/niharikatomar/Desktop/rr/restaurant-roulette/frontend/node_modules/@atlaskit/select/dist/esm/CountrySelect.js"],"names":["_extends","_objectSpread","css","_css2","_css","React","groupedCountries","Select","labelCSS","alignItems","display","lineHeight","flagCSS","fontSize","marginRight","Opt","_ref","children","icon","createElement","className","getOptionLabel","opt","name","getOptionValue","abbr","controlLabel","toUpperCase","optionLabel","_ref2","code","formatOptionLabel","_ref3","context","CountrySelect","props","isClearable","isMulti","options","styles","container","width","dropdownIndicator","paddingLeft","menu"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread\";\nimport { css as _css2 } from \"emotion\";\nimport { css as _css } from \"emotion\";\nimport React from 'react';\nimport { groupedCountries } from './data/countries';\nimport Select from './Select'; // flow stuff\n\n// custom option renderer\nvar labelCSS = function labelCSS() {\n  return {\n    alignItems: 'center',\n    display: 'flex',\n    lineHeight: 1.2\n  };\n};\n\nvar flagCSS = function flagCSS() {\n  return {\n    fontSize: '18px',\n    marginRight: '8px'\n  };\n};\n\nvar Opt = function Opt(_ref) {\n  var children = _ref.children,\n      icon = _ref.icon;\n  return React.createElement(\"div\", {\n    className: _css(labelCSS())\n  }, React.createElement(\"span\", {\n    className: _css2(flagCSS())\n  }, icon), children);\n}; // return the country name; used for searching\n\n\nvar getOptionLabel = function getOptionLabel(opt) {\n  return opt.name;\n}; // set the country's abbreviation for the option value, (also searchable)\n\n\nvar getOptionValue = function getOptionValue(opt) {\n  return opt.abbr;\n}; // the text node of the control\n\n\nvar controlLabel = function controlLabel(opt) {\n  return React.createElement(Opt, {\n    icon: opt.icon\n  }, opt.abbr.toUpperCase());\n}; // the text node for an option\n\n\nvar optionLabel = function optionLabel(_ref2) {\n  var abbr = _ref2.abbr,\n      code = _ref2.code,\n      icon = _ref2.icon,\n      name = _ref2.name;\n  return React.createElement(Opt, {\n    icon: icon\n  }, name, \" (\", abbr.toUpperCase(), \") +\", code);\n}; // switch formatters based on render context (menu | value)\n\n\nvar formatOptionLabel = function formatOptionLabel(opt, _ref3) {\n  var context = _ref3.context;\n  return context === 'value' ? controlLabel(opt) : optionLabel(opt);\n}; // put it all together\n\n\nvar CountrySelect = function CountrySelect(props) {\n  return React.createElement(Select, _extends({\n    isClearable: false,\n    formatOptionLabel: formatOptionLabel,\n    getOptionLabel: getOptionLabel,\n    getOptionValue: getOptionValue,\n    isMulti: false,\n    options: groupedCountries,\n    styles: {\n      container: function container(css) {\n        return _objectSpread({}, css, {\n          width: 105\n        });\n      },\n      dropdownIndicator: function dropdownIndicator(css) {\n        return _objectSpread({}, css, {\n          paddingLeft: 0\n        });\n      },\n      menu: function menu(css) {\n        return _objectSpread({}, css, {\n          width: 300\n        });\n      }\n    }\n  }, props));\n};\n\nexport default CountrySelect;"]},"metadata":{},"sourceType":"module"}