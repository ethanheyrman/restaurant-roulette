{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nexport var mapAttributesToState = function (_a) {\n  var _b = _a.isDisabled,\n      isDisabled = _b === void 0 ? false : _b,\n      _c = _a.isActive,\n      isActive = _c === void 0 ? false : _c,\n      _d = _a.isFocus,\n      isFocus = _d === void 0 ? false : _d,\n      _e = _a.isHover,\n      isHover = _e === void 0 ? false : _e,\n      _f = _a.isSelected,\n      isSelected = _f === void 0 ? false : _f;\n\n  if (isDisabled) {\n    return 'disabled';\n  }\n\n  if (isSelected && isFocus) {\n    return 'focusSelected';\n  }\n\n  if (isSelected) {\n    return 'selected';\n  }\n\n  if (isActive) {\n    return 'active';\n  }\n\n  if (isHover) {\n    return 'hover';\n  }\n\n  if (isFocus) {\n    return 'focus';\n  }\n\n  return 'default';\n};\nexport var filterProps = function ( // @ts-ignore - createAnalyticsEvent is injected from WithAnalyticsEvents HOC\n_a, type) {\n  var createAnalyticsEvent = _a.createAnalyticsEvent,\n      props = tslib_1.__rest(_a, // @ts-ignore - createAnalyticsEvent is injected from WithAnalyticsEvents HOC\n  [\"createAnalyticsEvent\"]);\n\n  if (type === 'span') {\n    var target = props.target,\n        href = props.href,\n        rest = tslib_1.__rest(props, [\"target\", \"href\"]);\n\n    return rest;\n  }\n\n  return props;\n};\nexport var getLoadingStyle = function (isLoading) {\n  return {\n    transition: 'opacity 0.3s',\n    opacity: isLoading ? 0 : 1\n  };\n};\nexport var composeRefs = function () {\n  var refs = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    refs[_i] = arguments[_i];\n  }\n\n  return function (x) {\n    refs.filter(function (r) {\n      return !!r;\n    }).forEach(function (ref) {\n      if (typeof ref === 'function') {\n        ref(x);\n      } else {\n        ref.current = x;\n      }\n    });\n  };\n};\n/**\n * Convert a hex colour code to RGBA.\n * @param {String} hex Hex colour code.\n * @param {Number} alpha Optional alpha value (defaults to 1).\n */\n\nexport function hex2rgba(hex, alpha) {\n  if (alpha === void 0) {\n    alpha = 1;\n  }\n\n  if (/^#([A-Fa-f0-9]{3}){1,2}$/.test(hex)) {\n    var colorArr = hex.substring(1).split('');\n\n    if (colorArr.length === 3) {\n      colorArr = [colorArr[0], colorArr[0], colorArr[1], colorArr[1], colorArr[2], colorArr[2]];\n    }\n\n    var color = \"0x\" + colorArr.join(''); // FIXME: `>>` operand can validly take a string value\n\n    var r = color >> 16 & 255;\n    var g = color >> 8 & 255;\n    var b = color & 255;\n    return \"rgba(\" + [r, g, b].join(',') + \", \" + alpha + \")\";\n  }\n\n  throw new Error('Bad Hex');\n}","map":{"version":3,"sources":["../src/components/utils.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nexport var mapAttributesToState = function (_a) {\n    var _b = _a.isDisabled, isDisabled = _b === void 0 ? false : _b, _c = _a.isActive, isActive = _c === void 0 ? false : _c, _d = _a.isFocus, isFocus = _d === void 0 ? false : _d, _e = _a.isHover, isHover = _e === void 0 ? false : _e, _f = _a.isSelected, isSelected = _f === void 0 ? false : _f;\n    if (isDisabled) {\n        return 'disabled';\n    }\n    if (isSelected && isFocus) {\n        return 'focusSelected';\n    }\n    if (isSelected) {\n        return 'selected';\n    }\n    if (isActive) {\n        return 'active';\n    }\n    if (isHover) {\n        return 'hover';\n    }\n    if (isFocus) {\n        return 'focus';\n    }\n    return 'default';\n};\nexport var filterProps = function (\n// @ts-ignore - createAnalyticsEvent is injected from WithAnalyticsEvents HOC\n_a, type) {\n    var createAnalyticsEvent = _a.createAnalyticsEvent, props = tslib_1.__rest(_a, \n    // @ts-ignore - createAnalyticsEvent is injected from WithAnalyticsEvents HOC\n    [\"createAnalyticsEvent\"]);\n    if (type === 'span') {\n        var target = props.target, href = props.href, rest = tslib_1.__rest(props, [\"target\", \"href\"]);\n        return rest;\n    }\n    return props;\n};\nexport var getLoadingStyle = function (isLoading) { return ({\n    transition: 'opacity 0.3s',\n    opacity: isLoading ? 0 : 1,\n}); };\nexport var composeRefs = function () {\n    var refs = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        refs[_i] = arguments[_i];\n    }\n    return function (x) {\n        refs\n            .filter(function (r) { return !!r; })\n            .forEach(function (ref) {\n            if (typeof ref === 'function') {\n                ref(x);\n            }\n            else {\n                ref.current = x;\n            }\n        });\n    };\n};\n/**\n * Convert a hex colour code to RGBA.\n * @param {String} hex Hex colour code.\n * @param {Number} alpha Optional alpha value (defaults to 1).\n */\nexport function hex2rgba(hex, alpha) {\n    if (alpha === void 0) { alpha = 1; }\n    if (/^#([A-Fa-f0-9]{3}){1,2}$/.test(hex)) {\n        var colorArr = hex.substring(1).split('');\n        if (colorArr.length === 3) {\n            colorArr = [\n                colorArr[0],\n                colorArr[0],\n                colorArr[1],\n                colorArr[1],\n                colorArr[2],\n                colorArr[2],\n            ];\n        }\n        var color = \"0x\" + colorArr.join('');\n        // FIXME: `>>` operand can validly take a string value\n        var r = (color >> 16) & 255;\n        var g = (color >> 8) & 255;\n        var b = color & 255;\n        return \"rgba(\" + [r, g, b].join(',') + \", \" + alpha + \")\";\n    }\n    throw new Error('Bad Hex');\n}\n//# sourceMappingURL=utils.js.map"]},"metadata":{},"sourceType":"module"}