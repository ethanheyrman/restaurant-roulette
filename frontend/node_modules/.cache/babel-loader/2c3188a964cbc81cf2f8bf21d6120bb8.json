{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport styled, { css, keyframes } from 'styled-components';\nimport { themed } from '@atlaskit/theme/components';\nimport { N500, N0 } from '@atlaskit/theme/colors';\nimport { SIZES_MAP } from './constants';\n\nvar getStrokeWidth = function getStrokeWidth(size) {\n  return Math.round(size / 10);\n};\n\nvar getStrokeCircumference = function getStrokeCircumference(size) {\n  var strokeWidth = getStrokeWidth(size);\n  var strokeRadius = size / 2 - strokeWidth / 2;\n  return Math.PI * strokeRadius * 2;\n};\n/* Define keyframes statically to prevent a perfomance issue in styled components v1 where the keyframes function\n * does not cache previous values resulting in each spinner injecting the same keyframe definition\n * in the DOM.\n * This can be reverted to dynamic keyframes when we upgrade to styled components v2\n */\n\n\nvar keyframeNames = {\n  noop: keyframes([\"\\n    from { opacity: 0; }\\n    to { opacity: 0; }\\n  \"]),\n  rotate: keyframes([\"\\n    to { transform: rotate(360deg); }\\n  \"]),\n  enterOpacity: keyframes([\"\\n    from { opacity: 0; }\\n    to { opacity: 1; }\\n  \"]),\n  smallEnterStroke: keyframes([\"\\n    from { stroke-dashoffset: \", \"px; }\\n    to { stroke-dashoffset: \", \"px; }\\n  \"], getStrokeCircumference(SIZES_MAP.small), getStrokeCircumference(SIZES_MAP.small) * 0.8),\n  mediumEnterStroke: keyframes([\"\\n    from { stroke-dashoffset: \", \"px; }\\n    to { stroke-dashoffset: \", \"px; }\\n  \"], getStrokeCircumference(SIZES_MAP.medium), getStrokeCircumference(SIZES_MAP.medium) * 0.8),\n  largeEnterStroke: keyframes([\"\\n    from { stroke-dashoffset: \", \"px; }\\n    to { stroke-dashoffset: \", \"px; }\\n  \"], getStrokeCircumference(SIZES_MAP.large), getStrokeCircumference(SIZES_MAP.large) * 0.8),\n  xlargeEnterStroke: keyframes([\"\\n    from { stroke-dashoffset: \", \"px; }\\n    to { stroke-dashoffset: \", \"px; }\\n  \"], getStrokeCircumference(SIZES_MAP.xlarge), getStrokeCircumference(SIZES_MAP.xlarge) * 0.8)\n};\n/* If a standard size is used, we can use one of our statically defined keyframes, otherwise\n * we're forced to dynamically create the keyframe and incur a performance cost.\n */\n\nvar getEnterStrokeKeyframe = function getEnterStrokeKeyframe(size) {\n  var standardSizeName = Object.keys(SIZES_MAP).find(function (sizeName) {\n    return size === SIZES_MAP[sizeName];\n  });\n\n  if (standardSizeName) {\n    return keyframeNames[\"\".concat(standardSizeName, \"EnterStroke\")];\n  }\n\n  var circumference = getStrokeCircumference(size);\n  return keyframes([\"\\n    from { stroke-dashoffset: \", \"px; }\\n    to { stroke-dashoffset: \", \"px; }\\n  \"], circumference, circumference * 0.8);\n};\n\nvar spinnerColor = themed({\n  light: N500,\n  dark: N0\n});\nvar spinnerColorInverted = themed({\n  light: N0,\n  dark: N0\n});\nexport var getStrokeColor = function getStrokeColor(_ref // $FlowFixMe - theme is not found in props\n) {\n  var invertColor = _ref.invertColor,\n      props = _objectWithoutProperties(_ref, [\"invertColor\"]);\n\n  return invertColor ? spinnerColorInverted(props) : spinnerColor(props);\n};\nexport var svgStyles = css([\"\\n  \", \";\\n\"], function (props) {\n  var circumference = getStrokeCircumference(props.size);\n\n  var animation = function animation(animProps) {\n    var baseAnimation = '0.86s cubic-bezier(0.4, 0.15, 0.6, 0.85) infinite';\n\n    if (animProps.phase === 'ENTER') {\n      return css([\"\\n          animation: \", \" \", \",\\n            0.8s ease-in-out \", \",\\n            0.2s ease-in-out \", \";\\n        \"], baseAnimation, keyframeNames.rotate, getEnterStrokeKeyframe(animProps.size), keyframeNames.enterOpacity);\n    }\n\n    return css([\"\\n        animation: \", \" \", \";\\n      \"], baseAnimation, keyframeNames.rotate);\n  };\n\n  return css([\"\\n      \", \"\\n      fill: none;\\n      stroke: \", \";\\n      stroke-dasharray: \", \"px;\\n      stroke-dashoffset: \", \"px;\\n      stroke-linecap: round;\\n      stroke-width: \", \"px;\\n      transform-origin: center;\\n    \"], animation, getStrokeColor, circumference, circumference * 0.8, getStrokeWidth(props.size));\n});\nvar Svg = styled.svg.withConfig({\n  displayName: \"styledSvg__Svg\",\n  componentId: \"y2l69q-0\"\n})([\"\\n  \", \";\\n\"], svgStyles);\nSvg.displayName = 'SpinnerSvg';\nexport default Svg;","map":{"version":3,"sources":["/Users/niharikatomar/Desktop/rr/restaurant-roulette/frontend/node_modules/@atlaskit/calendar/node_modules/@atlaskit/spinner/Spinner/styledSvg.js"],"names":["_objectWithoutProperties","styled","css","keyframes","themed","N500","N0","SIZES_MAP","getStrokeWidth","size","Math","round","getStrokeCircumference","strokeWidth","strokeRadius","PI","keyframeNames","noop","rotate","enterOpacity","smallEnterStroke","small","mediumEnterStroke","medium","largeEnterStroke","large","xlargeEnterStroke","xlarge","getEnterStrokeKeyframe","standardSizeName","Object","keys","find","sizeName","concat","circumference","spinnerColor","light","dark","spinnerColorInverted","getStrokeColor","_ref","invertColor","props","svgStyles","animation","animProps","baseAnimation","phase","Svg","svg","withConfig","displayName","componentId"],"mappings":"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","sourcesContent":["import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport styled, { css, keyframes } from 'styled-components';\nimport { themed } from '@atlaskit/theme/components';\nimport { N500, N0 } from '@atlaskit/theme/colors';\nimport { SIZES_MAP } from './constants';\n\nvar getStrokeWidth = function getStrokeWidth(size) {\n  return Math.round(size / 10);\n};\n\nvar getStrokeCircumference = function getStrokeCircumference(size) {\n  var strokeWidth = getStrokeWidth(size);\n  var strokeRadius = size / 2 - strokeWidth / 2;\n  return Math.PI * strokeRadius * 2;\n};\n/* Define keyframes statically to prevent a perfomance issue in styled components v1 where the keyframes function\n * does not cache previous values resulting in each spinner injecting the same keyframe definition\n * in the DOM.\n * This can be reverted to dynamic keyframes when we upgrade to styled components v2\n */\n\n\nvar keyframeNames = {\n  noop: keyframes([\"\\n    from { opacity: 0; }\\n    to { opacity: 0; }\\n  \"]),\n  rotate: keyframes([\"\\n    to { transform: rotate(360deg); }\\n  \"]),\n  enterOpacity: keyframes([\"\\n    from { opacity: 0; }\\n    to { opacity: 1; }\\n  \"]),\n  smallEnterStroke: keyframes([\"\\n    from { stroke-dashoffset: \", \"px; }\\n    to { stroke-dashoffset: \", \"px; }\\n  \"], getStrokeCircumference(SIZES_MAP.small), getStrokeCircumference(SIZES_MAP.small) * 0.8),\n  mediumEnterStroke: keyframes([\"\\n    from { stroke-dashoffset: \", \"px; }\\n    to { stroke-dashoffset: \", \"px; }\\n  \"], getStrokeCircumference(SIZES_MAP.medium), getStrokeCircumference(SIZES_MAP.medium) * 0.8),\n  largeEnterStroke: keyframes([\"\\n    from { stroke-dashoffset: \", \"px; }\\n    to { stroke-dashoffset: \", \"px; }\\n  \"], getStrokeCircumference(SIZES_MAP.large), getStrokeCircumference(SIZES_MAP.large) * 0.8),\n  xlargeEnterStroke: keyframes([\"\\n    from { stroke-dashoffset: \", \"px; }\\n    to { stroke-dashoffset: \", \"px; }\\n  \"], getStrokeCircumference(SIZES_MAP.xlarge), getStrokeCircumference(SIZES_MAP.xlarge) * 0.8)\n};\n/* If a standard size is used, we can use one of our statically defined keyframes, otherwise\n * we're forced to dynamically create the keyframe and incur a performance cost.\n */\n\nvar getEnterStrokeKeyframe = function getEnterStrokeKeyframe(size) {\n  var standardSizeName = Object.keys(SIZES_MAP).find(function (sizeName) {\n    return size === SIZES_MAP[sizeName];\n  });\n\n  if (standardSizeName) {\n    return keyframeNames[\"\".concat(standardSizeName, \"EnterStroke\")];\n  }\n\n  var circumference = getStrokeCircumference(size);\n  return keyframes([\"\\n    from { stroke-dashoffset: \", \"px; }\\n    to { stroke-dashoffset: \", \"px; }\\n  \"], circumference, circumference * 0.8);\n};\n\nvar spinnerColor = themed({\n  light: N500,\n  dark: N0\n});\nvar spinnerColorInverted = themed({\n  light: N0,\n  dark: N0\n});\nexport var getStrokeColor = function getStrokeColor(_ref // $FlowFixMe - theme is not found in props\n) {\n  var invertColor = _ref.invertColor,\n      props = _objectWithoutProperties(_ref, [\"invertColor\"]);\n\n  return invertColor ? spinnerColorInverted(props) : spinnerColor(props);\n};\nexport var svgStyles = css([\"\\n  \", \";\\n\"], function (props) {\n  var circumference = getStrokeCircumference(props.size);\n\n  var animation = function animation(animProps) {\n    var baseAnimation = '0.86s cubic-bezier(0.4, 0.15, 0.6, 0.85) infinite';\n\n    if (animProps.phase === 'ENTER') {\n      return css([\"\\n          animation: \", \" \", \",\\n            0.8s ease-in-out \", \",\\n            0.2s ease-in-out \", \";\\n        \"], baseAnimation, keyframeNames.rotate, getEnterStrokeKeyframe(animProps.size), keyframeNames.enterOpacity);\n    }\n\n    return css([\"\\n        animation: \", \" \", \";\\n      \"], baseAnimation, keyframeNames.rotate);\n  };\n\n  return css([\"\\n      \", \"\\n      fill: none;\\n      stroke: \", \";\\n      stroke-dasharray: \", \"px;\\n      stroke-dashoffset: \", \"px;\\n      stroke-linecap: round;\\n      stroke-width: \", \"px;\\n      transform-origin: center;\\n    \"], animation, getStrokeColor, circumference, circumference * 0.8, getStrokeWidth(props.size));\n});\nvar Svg = styled.svg.withConfig({\n  displayName: \"styledSvg__Svg\",\n  componentId: \"y2l69q-0\"\n})([\"\\n  \", \";\\n\"], svgStyles);\nSvg.displayName = 'SpinnerSvg';\nexport default Svg;"]},"metadata":{},"sourceType":"module"}