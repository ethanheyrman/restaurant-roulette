{"ast":null,"code":"import * as tslib_1 from \"tslib\";\n/** @jsx jsx */\n\nimport { jsx } from '@emotion/core';\nimport { getLoadingStyle } from './utils';\nimport { gridSize } from '@atlaskit/theme/constants';\nexport default (function (_a) {\n  var spacing = _a.spacing,\n      icon = _a.icon,\n      isOnlyChild = _a.isOnlyChild,\n      isLoading = _a.isLoading,\n      rest = tslib_1.__rest(_a, [\"spacing\", \"icon\", \"isOnlyChild\", \"isLoading\"]);\n\n  return jsx(\"span\", tslib_1.__assign({\n    css: tslib_1.__assign({\n      alignSelf: 'center',\n      display: 'flex',\n      flexShrink: 0,\n      lineHeight: 0,\n      fontSize: 0,\n      userSelect: 'none',\n      margin: spacing === 'none' ? 0 : isOnlyChild ? \"0 -\" + gridSize() / 4 + \"px\" : \"0 \" + gridSize() / 2 + \"px\"\n    }, getLoadingStyle(isLoading))\n  }, rest), icon);\n});","map":{"version":3,"sources":["../src/components/IconWrapper.tsx"],"names":[],"mappings":";AAAA;;AACA,SAAS,GAAT,QAAoB,eAApB;AACA,SAAS,eAAT,QAAgC,SAAhC;AACA,SAAS,QAAT,QAAyB,2BAAzB;AASA,gBAAe,UAAC,EAAD,EAA0D;AAAvD,MAAA,OAAA,GAAA,EAAA,CAAA,OAAA;AAAA,MAAS,IAAA,GAAA,EAAA,CAAA,IAAT;AAAA,MAAe,WAAA,GAAA,EAAA,CAAA,WAAf;AAAA,MAA4B,SAAA,GAAA,EAAA,CAAA,SAA5B;AAAA,MAAuC,IAAA,GAAA,OAAA,CAAA,MAAA,CAAA,EAAA,EAAA,CAAA,SAAA,EAAA,MAAA,EAAA,aAAA,EAAA,WAAA,CAAA,CAAvC;;AAA4D,SAC5E,GAAA,CAAA,MAAA,EAAA,OAAA,CAAA,QAAA,CAAA;AACE,IAAA,GAAG,EAAA,OAAA,CAAA,QAAA,CAAA;AACD,MAAA,SAAS,EAAE,QADV;AAED,MAAA,OAAO,EAAE,MAFR;AAGD,MAAA,UAAU,EAAE,CAHX;AAID,MAAA,UAAU,EAAE,CAJX;AAKD,MAAA,QAAQ,EAAE,CALT;AAMD,MAAA,UAAU,EAAE,MANX;AAOD,MAAA,MAAM,EACJ,OAAO,KAAK,MAAZ,GACI,CADJ,GAEI,WAAW,GACX,QAAM,QAAQ,KAAK,CAAnB,GAAoB,IADT,GAEX,OAAK,QAAQ,KAAK,CAAlB,GAAmB;AAZxB,KAAA,EAaE,eAAe,CAAC,SAAD,CAbjB;AADL,GAAA,EAgBM,IAhBN,CAAA,EAkBG,IAlBH,CAD4E;AAqB7E,CArBD","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\n/** @jsx jsx */\nimport { jsx } from '@emotion/core';\nimport { getLoadingStyle } from './utils';\nimport { gridSize } from '@atlaskit/theme/constants';\nexport default (function (_a) {\n    var spacing = _a.spacing, icon = _a.icon, isOnlyChild = _a.isOnlyChild, isLoading = _a.isLoading, rest = tslib_1.__rest(_a, [\"spacing\", \"icon\", \"isOnlyChild\", \"isLoading\"]);\n    return (jsx(\"span\", tslib_1.__assign({ css: tslib_1.__assign({ alignSelf: 'center', display: 'flex', flexShrink: 0, lineHeight: 0, fontSize: 0, userSelect: 'none', margin: spacing === 'none'\n                ? 0\n                : isOnlyChild\n                    ? \"0 -\" + gridSize() / 4 + \"px\"\n                    : \"0 \" + gridSize() / 2 + \"px\" }, getLoadingStyle(isLoading)) }, rest), icon));\n});\n//# sourceMappingURL=IconWrapper.js.map"]},"metadata":{},"sourceType":"module"}